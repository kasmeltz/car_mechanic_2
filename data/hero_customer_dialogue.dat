return 
{
	first_contact_start = 
	{		
		actor = 'h', 
		options = 
		{
			{
				line = function() return 'Good ' .. worldTime:timeOfDay() .. ' ' .. customer:salutation() .. ', how are you today?' end,
				onChoose = function() garage:reputationInc(10) end,
				next = function() return 'cust_greet_1' end
			},
			{
				line = function() return 'Screw you' end,
				onChoose = function() garage:reputationInc(-200) end,
				next = function() return 'cust_angry_1' end
			}
		},		
	},
	cust_angry_1 = 
	{
		actor = 'c',
		options = 
		{
			{
				line = function() return 'Screw you too I\'m leaving!' end,
				next = function() return '' end,
				onChoose = function() world:finalizeAppointment(appointment, visitResolver.CUSTOMER_PISSED) end
			}
		}
	},
	cust_greet_1 = 
	{
		actor = 'c',
		options = 
		{
			{
				line = function() return 'Yes good ' .. worldTime:timeOfDay() .. '. I\'m ok how are you?' end,
				next = function() return 'hero_greet_1' end
			}
		}
	},
	hero_greet_1 = 
	{
		actor = 'h',
		options = 
		{
			{
				line = function() return 'Can\'t complain... but really who would listen anyways?' end,
				next = function() return 'hero_ask_help' end
			}
		}
	},
	hero_ask_help = 
	{
		actor = 'h',
		options = 
		{
			{
				line = function() return 'So what can I help you with today?' end,
				next = function() return 'cust_explain_problem' end
			}
		}
	},
	cust_explain_problem = 
	{
		actor = 'c',
		options = 
		{
			{
				condition = function() return vehicle:problem(1):realProblem().category == 'maintenance' end,
				line = function() return 'My ' .. vehicle:vehicleType() .. ' ' .. vehicle:problem(1):realProblem().symptoms[1] .. '.' end,
				next = function() return  'hero_respond_problem' end
			},
			{
				condition = function() return math.random(1, 100) <= 25 end,
				line = function() return 'I think that my ' .. vehicle:vehicleType() .. ' has ' .. vehicle:problem(1):realProblem().name .. '.' end,
				next = function() return  'hero_respond_problem' end
			},
			{
				condition = function() return #vehicle:problems() == 1 end,
				line = function() 
					local s1 = math.random(1, #vehicle:problem(1):realProblem().symptoms)
					return 'I don\'t know exactly what\'s wrong with my ' .. vehicle:vehicleType() .. ', but ' .. vehicle:problem(1):realProblem().symptoms[s1] .. '.' end,
				next = function() return  'hero_respond_problem' end
			},
			{
				condition = function() return #vehicle:problems() > 1 and math.random(1, 100) < 50 end,
				line = function() 
					local s1 = math.random(1, #vehicle:problem(1):realProblem().symptoms)
					return 'I don\'t know exactly what\'s wrong with my ' .. vehicle:vehicleType() .. ', but ' .. vehicle:problem(1):realProblem().symptoms[s1] .. '.' end,
				next = function() return  'hero_respond_problem' end
			},	
			{
				condition = function() return #vehicle:problems() >= 2 end,
				line = function() 
					local s1 = math.random(1, #vehicle:problem(1):realProblem().symptoms)
					local s2 = math.random(1, #vehicle:problem(2):realProblem().symptoms)
					return 'I don\'t know exactly what\'s wrong with my ' .. vehicle:vehicleType() .. ', but ' .. vehicle:problem(1):realProblem().symptoms[s1] .. 
						', and ' .. vehicle:problem(2):realProblem().symptoms[s2] end,
				next = function() return  'hero_respond_problem' end
			},				
		}
	},
	hero_respond_problem = 
	{
		onStart = function() hero:readPerson(customer) end,
		actor = 'h',
		options =
		{
			{
				line = function() return 'I think we can help you with that. When do you need your ' .. vehicle:vehicleType() .. ' back?' end,
				next = function() return 'cust_when_required' end
			},
			{
				line = function() return 'I\'m sorry but we\'re too busy right now. Is it possible for you to come back later?' end,
				next = function() return 'cust_too_busy' end
			},
			{
				line = function() return 'I\'m sorry but we\'re not currently able to provide that service here.' end,
				next = function() return 'cust_unable_to_help' end
			}
		}
	},
	cust_unable_to_help = 
	{
		actor = 'c',
		options =
		{
			{
				-- to do should this be based on a feature of the customer rather than just random?
				condition = function() return math.random(1, 100) < 50 end,
				line = function() return 'I understand, you can\'t do everyhing, right? Thanks anyways.' end,
				onChoose = function() world:finalizeAppointment(appointment, visitResolver.SENT_AWAY_UNABLE) end,
				next = function() return '' end
			},
			{
				line = function() return 'You don\'t think you can help me? What kind of shop is this anyways? I drove all the way here and now I\'ve got to find somewhere else?' end,
				next = function() return 'hero_unable_help_angry' end
			}
		}
	},
	hero_unable_help_angry = 
	{
		actor = 'h',
		options =
		{
			{
				condition = function() return hero:communicationLevel() > 0 end,
				line = function() return 'I understand that it\'s frustrating that you drove all the way here and we couldn\'t help you so now you have to find somewhere else. I wish we could help but we just don\'t have the equpiment or expertise to help with what you need.' end,
				next = function() return 'cust_unable_to_help_understood' end
			},
			{
				line = function() return 'Hey, we\'re a small shop we can\'t do everything around here.' end,
				onChoose = function() 
					customer:angerInc(50)
					world:finalizeAppointment(appointment, visitResolver.SENT_AWAY_UNABLE) 
				end,
				next = function() return '' end
			}
		}
	},
	cust_unable_to_help_understood = 
	{
		actor = 'c',
		options =
		{
			{
				line = function() return 'I understand, you can\'t do everyhing, right? Thanks anyways.' end,
				onChoose = function() 
					hero:skillPointsInc(1)
					customer:angerInc(-50)
					world:finalizeAppointment(appointment, visitResolver.SENT_AWAY_UNABLE) 
				end,
				next = function() return '' end
			}
		}
	},
	cust_too_busy = 
	{
		actor = 'c',
		options =
		{
			{
				-- to do should this be based on a feature of the customer rather than just random?
				condition = function() return math.random(1, 100) < 100 end,
				line = function() return 'It\s not super urgent so yes I could possible come back later. When could I have it looked at?' end,
				next = function() return 'hero_when_available' end
			},
			{
				line = function() return 'I\'m sorry the problem is urgent and I need it looked at right away. Maybe next time!' end,
				next = function() return '' end,
				onChoose = function() world:finalizeAppointment(appointment, visitResolver.DIDNT_WANT_TO_WAIT) end
			}
		}
	},
	hero_when_available = 
	{
		actor = 'h',
		options =
		{
			{
				line = function() return 'Let me check my computer to see when we could have a look at it.' end,
				next = function() return 'hero_suggest_come_back_calendar' end,
				onChoose = function() world:showCalendar() end
			}
		}
	},
	hero_suggest_come_back_calendar = 
	{
		actor = 'h',
		options =
		{
			{
				line = function() return 'Ok here is a free time slot.' end,
				next = function() return 'hero_suggest_come_back' end,
			}
		}
	},
	hero_suggest_come_back = 
	{
		actor = 'h',
		options =
		{
			{
				line = function() return 'What about ' .. worldTime:dateInFutureText(world:selectedAppointmentTime()) .. '?' end,
				next = function() return 'cust_decide_come_back' end
			}
		}
	},
	cust_decide_come_back = 
	{
		actor = 'c',
		options =
		{
			{
				condition = function() return customer:acceptAppointment(worldTime, world:selectedAppointmentTime()) end,
				line = function() return 'Sure that time will work for me. I\'ll come back then.' end,
				next = function() return 'hero_yes_come_back' end
			},
			{
				line = function() return 'I\'m sorry the problem is a little more urgent than that, and I need it looked at sooner. Maybe next time!' end,
				next = function() return '' end,
				onChoose = function() world:finalizeAppointment(appointment, visitResolver.DIDNT_WANT_TO_WAIT) end
			}
		}
	},
	hero_yes_come_back = 
	{
		actor = 'h',
		options =
		{
			{
				line = function() return 'Ok great. Can I get your name so that we can keep track of the appointment?' end,
				next = function() return 'cust_give_name_appt' end,
			}
		}
	},
	cust_give_name_appt = 
	{
		actor = 'c',
		options =
		{
			{
				line = function() customer:nameRevealed(true) return 'Yes of course, my name is ' .. customer:name() .. '.' end,
				next = function() return 'hero_see_you_appt' end,
			}
		}
	},
	hero_see_you_appt = 
	{
		actor = 'h',
		options =
		{
			{
				line = function() return 'Excellent, ' .. customer:firstName() .. '! The name\'s ' .. hero:firstName() .. '. Nice to meet you. We will see you later.' end,
				next = function() return '' end,
				onChoose = function() world:scheduleComeBack(appointment) end
			}
		}
	},
	cust_when_required =
	{
		actor = 'c',
		options =
		{
			{
				line = function() return 'I need it back by ' .. customer:finishTimeRequired(worldTime) .. '.' end,
				next = function() return 'hero_can_finish_on_time' end
			}
		}
	},
	hero_can_finish_on_time =
	{
		actor = 'h',
		options =
		{
			{
				line = function() return 'I think we can have it back to you by that time.' end,
				next = function() return 'hero_get_name' end
			},
			{
				line = function() return 'I don\'t think we can have it ready by then. Let me check and see when I could have it ready for you...' end,
				next = function() return 'hero_suggest_finish_time_calendar' end,
				onChoose = function() world:showCalendar() end
			}
		}
	},
	hero_suggest_finish_time_calendar =
	{
		actor = 'h',
		options =
		{
			{
				line = function() return 'Ok here is a free time slot.' end,
				next = function() return 'hero_suggest_finish_time' end,
			}
		}
	},
	hero_suggest_finish_time =
	{
		actor = 'h',
		options =
		{
			{
				line = function() return 'What about ' .. worldTime:dateInFutureText(world:selectedAppointmentTime()) .. '?' end,
				next = function() return 'customer_accept_finish_time' end
			}
		}
	},
	customer_accept_finish_time =
	{
		actor = 'c',
		options =
		{
			{
				condition = function() return customer:acceptFinishTime(worldTime, world:selectedAppointmentTime()) end,
				line = function() return 'Sure I can wait until then to pick it up.' end,
				next = function() return 'hero_get_name' end
			},
			{
				line = function() return 'I\'m sorry the problem is a little more urgent than that, and I need it to be finished sooner. Maybe next time!' end,
				next = function() return '' end,
				onChoose = function() world:finalizeAppointment(appointment, visitResolver.DIDNT_WANT_TO_WAIT) end
			}
		}
	},
	hero_get_name =
	{
		actor = 'h',
		options =
		{
			{
				condition = function() return customer:nameRevealed() end,
				line = function() return 'Alright ' .. customer:firstName() end,
				next = function() return 'hero_ask_for_keys' end
			},
			{
				condition = function() return not customer:nameRevealed() end,
				line = function() return 'What\'s your name?' end,
				next = function() return 'customer_give_name' end
			}
		}
	},
	customer_give_name =
	{
		actor = 'c',
		options =
		{
			{
				line = function() customer:nameRevealed(true) return customer:name() end,
				next = function() return 'hero_reflect_name' end
			}
		}
	},
	hero_reflect_name =
	{
		actor = 'h',
		options =
		{
			{
				line = function() return 'Alright ' .. customer:name() .. ', the name\'s ' .. hero:firstName() .. '. Nice to meet you.' end,
				next = function() return 'hero_ask_for_keys' end
			}
		}
	},
	hero_ask_for_keys =
	{
		actor = 'h',
		options =
		{
			{
				line = function() return 'If I can just have your keys, we will get started on that right away for you.' end,
				next = function() return '' end,
				onChoose = function() world:acceptVehicle(appointment) end
			}
		}
	},
	return_for_appt_start =
	{
		actor = 'h', 
		options = 
		{
			{
				line = function() return 'Good ' .. worldTime:timeOfDay() .. ' ' .. customer:firstName() .. ', welcome back.' end,
				next = function() return 'cust_return_appt' end
			}
		},		
	},
	cust_return_appt =
	{
		actor = 'c', 
		options = 
		{
			{
				line = function() return 'Hi. I have an appointment scheduled for my ' .. vehicle:vehicleType() .. '. The name\'s ' .. customer:name() .. '.' end,
				next = function() return 'hero_return_appt' end
			}
		},		
	},
	hero_return_appt =
	{
		actor = 'h',
		options =
		{
			{
				line = function() return 'Ok we\'re ready to help you. When do you need your ' .. vehicle:vehicleType() .. ' back?' end,
				next = function() return 'cust_when_required' end
			},
			{
				line = function() return 'I\'m sorry but we accidentally double booked you and we can\'t look at it at thhis very moment.' end,
				next = function() return '' end
			}
		}
	},
	return_for_vehicle_start =
	{
		actor = 'h', 
		options = 
		{
			{
				line = function() return 'Good ' .. worldTime:timeOfDay() .. ' ' .. customer:firstName() .. ', welcome back.' end,
				next = function() return 'cust_return_vehicle' end
			}
		},		
	},	
	cust_return_vehicle =
	{
		actor = 'c', 
		options = 
		{
			{
				line = function() return 'Hi ' .. hero:firstName() .. ', I\'m here for my ' .. vehicle:vehicleType() .. '.' end,
				next = function() return 'hero_generate_invoice' end
			}
		},		
	},
	hero_generate_invoice =
	{
		actor = 'h', 
		options = 
		{
			{
				line = function() return 'It\'s all ready. Let me just get the invoice for you....' end,
				next = function() return 'hero_vehicle_ready' end,
				onChoose = function() world:showInvoice(appointment) end
			}
		},		
	},
	hero_vehicle_ready =
	{
		actor = 'h', 
		options = 
		{
			{
				line = function() return 'Ok here are the keys ' .. customer:firstName() .. '. Have a good day!' end,
				next = function() return '' end,
				onChoose = function() world:releaseVehicle(appointment) end
			}
		},		
	},	
}